#!/usr/bin/env perl
# $Id$
#
# TODO
# - parse a .slcfg to populate the data

# use lib qw(%INST_PLMODDIR%);
use lib qw(../../tools/lib);
use PFL::Getoptv;
use strict;
use warnings;

my $d = "/local";
my $ud = "/usr/local";

my $p = ".psc.edu";
my $t = ".psc.teragrid.org";

my %dep = (
	arc => [
		{ prog => "slashd",	 host => "illusion1$p",		   dir => $d },
		{ prog => "slashd",	 host => "illusion2$p",		   dir => $d },
		{ exec => "sleep", arg => [2] },

		{ prog => "mount_slash", host => "arclog0$p",		   dir => $ud, arg => "-U /arc" },
		{ prog => "mount_slash", host => "arclog1$p",		   dir => $ud, arg => "-U /arc" },
		{ prog => "mount_slash", host => "firehose1$p",		   dir => $d,  arg => "-U /arc" },
		{ prog => "mount_slash", host => "firehose2$p",		   dir => $d,  arg => "-U /arc" },
		{ prog => "mount_slash", host => "firehose3$p",		   dir => $d,  arg => "-U /arc" },
		{ prog => "mount_slash", host => "firehose4$p",		   dir => $d,  arg => "-U /arc" },
		{ prog => "mount_slash", host => "galosh0$p",		   dir => $ud, arg => "-U /arc" },
		{ prog => "mount_slash", host => "galosh1$p",		   dir => $ud, arg => "-U /arc" },
		{ prog => "mount_slash", host => "illusion2$p",		   dir => $d,  arg => "-U /arc -D /local/arc.s2/var" },
		{ prog => "mount_slash", host => "kollman0$p",		   dir => $ud, arg => "-U /arc", init => 'modprobe fuse', env => { LNET_NETWORKS => "tcp12(eth3)" } },
		{ prog => "mount_slash", host => "lemur01$p",		   dir => $d,  arg => "-U /arc -D /local/arc.s2/var" },
		{ prog => "mount_slash", host => "pscuxa$p",		   dir => $d,  arg => "-U /arc", init => 'modprobe fuse' },
		{ prog => "mount_slash", host => "tahini$p",		   dir => $ud, arg => "-U /arc", init => 'modprobe fuse' },
		{ prog => "mount_slash", host => "tg-login1.blacklight$t", dir => $ud, arg => "-U /arc", init => 'modprobe fuse', env => { LNET_NETWORKS => "tcp12(eth2)", LD_LIBRARY_PATH => "/usr/local/lib" } },
		{ prog => "mount_slash", host => "tg-login2.blacklight$t", dir => $ud, arg => "-U /arc", init => 'modprobe fuse', env => { LNET_NETWORKS => "tcp12(eth2)", LD_LIBRARY_PATH => "/usr/local/lib" } },
		{ prog => "mount_slash", host => "xfer-admin$p",	   dir => $ud, arg => "-U /arc", init => 'modprobe fuse' },

		{ exec => "sleep", arg => [2] },

		{ name => "sliod-ue", prog => "sliod", host => "tahini$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sliod.ue.sock", LNET_NETWORKS => "tcp12(vlan99)" } },
		{ name => "sliod-uo", prog => "sliod", host => "tahini$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sliod.uo.sock", LNET_NETWORKS => "tcp12(eth2)" } },

		{ name => "sliod", prog => "sliod", host => "peel0$p", dir => $ud, env => { LNET_NETWORKS => "tcp12(vlan99)" } },

		{ name => "sliod0", prog => "sliod", host => "sense0$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense0-sliod0.sock", LNET_NETWORKS => "tcp12(mxge0:0)" } },
		{ name => "sliod1", prog => "sliod", host => "sense0$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense0-sliod1.sock", LNET_NETWORKS => "tcp12(mxge0:1)" } },
		{ name => "sliod2", prog => "sliod", host => "sense0$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense0-sliod2.sock", LNET_NETWORKS => "tcp12(mxge0:2)" } },
		{ name => "sliod3", prog => "sliod", host => "sense0$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense0-sliod3.sock", LNET_NETWORKS => "tcp12(mxge0:3)" } },
		{ name => "sliod4", prog => "sliod", host => "sense0$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense0-sliod4.sock", LNET_NETWORKS => "tcp12(mxge0:4)" } },
		{ name => "sliod5", prog => "sliod", host => "sense0$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense0-sliod5.sock", LNET_NETWORKS => "tcp12(mxge0:5)" } },
		{ name => "sliod6", prog => "sliod", host => "sense0$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense0-sliod6.sock", LNET_NETWORKS => "tcp12(mxge0:6)" } },
		{ name => "sliod7", prog => "sliod", host => "sense0$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense0-sliod7.sock", LNET_NETWORKS => "tcp12(mxge0:7)" } },

		{ name => "sliod0", prog => "sliod", host => "sense1$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense1-sliod0.sock", LNET_NETWORKS => "tcp12(mxge0:0)" } },
		{ name => "sliod1", prog => "sliod", host => "sense1$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense1-sliod1.sock", LNET_NETWORKS => "tcp12(mxge0:1)" } },
		{ name => "sliod2", prog => "sliod", host => "sense1$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense1-sliod2.sock", LNET_NETWORKS => "tcp12(mxge0:2)" } },
		{ name => "sliod3", prog => "sliod", host => "sense1$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense1-sliod3.sock", LNET_NETWORKS => "tcp12(mxge0:3)" } },
		{ name => "sliod4", prog => "sliod", host => "sense1$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense1-sliod4.sock", LNET_NETWORKS => "tcp12(mxge0:4)" } },
		{ name => "sliod5", prog => "sliod", host => "sense1$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense1-sliod5.sock", LNET_NETWORKS => "tcp12(mxge0:5)" } },
		{ name => "sliod6", prog => "sliod", host => "sense1$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense1-sliod6.sock", LNET_NETWORKS => "tcp12(mxge0:6)" } },

		{ name => "sliod0", prog => "sliod", host => "sense2$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense2-sliod0.sock", LNET_NETWORKS => "tcp12(mxge0:0)" } },
		{ name => "sliod1", prog => "sliod", host => "sense2$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense2-sliod1.sock", LNET_NETWORKS => "tcp12(mxge0:1)" } },
		{ name => "sliod2", prog => "sliod", host => "sense2$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense2-sliod2.sock", LNET_NETWORKS => "tcp12(mxge0:2)" } },
		{ name => "sliod3", prog => "sliod", host => "sense2$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense2-sliod3.sock", LNET_NETWORKS => "tcp12(mxge0:3)" } },
		{ name => "sliod4", prog => "sliod", host => "sense2$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense2-sliod4.sock", LNET_NETWORKS => "tcp12(mxge0:4)" } },
		{ name => "sliod5", prog => "sliod", host => "sense2$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense2-sliod5.sock", LNET_NETWORKS => "tcp12(mxge0:5)" } },
		{ name => "sliod6", prog => "sliod", host => "sense2$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense2-sliod6.sock", LNET_NETWORKS => "tcp12(mxge0:6)" } },
		{ name => "sliod7", prog => "sliod", host => "sense2$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense2-sliod7.sock", LNET_NETWORKS => "tcp12(mxge0:7)" } },

		{ name => "sliod0", prog => "sliod", host => "sense3$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense3-sliod0.sock", LNET_NETWORKS => "tcp12(mxge0:0)" } },
		{ name => "sliod1", prog => "sliod", host => "sense3$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense3-sliod1.sock", LNET_NETWORKS => "tcp12(mxge0:1)" } },
		{ name => "sliod2", prog => "sliod", host => "sense3$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense3-sliod2.sock", LNET_NETWORKS => "tcp12(mxge0:2)" } },
		{ name => "sliod3", prog => "sliod", host => "sense3$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense3-sliod3.sock", LNET_NETWORKS => "tcp12(mxge0:3)" } },
		{ name => "sliod4", prog => "sliod", host => "sense3$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense3-sliod4.sock", LNET_NETWORKS => "tcp12(mxge0:4)" } },
		{ name => "sliod5", prog => "sliod", host => "sense3$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense3-sliod5.sock", LNET_NETWORKS => "tcp12(mxge0:5)" } },
		{ name => "sliod6", prog => "sliod", host => "sense3$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense3-sliod6.sock", LNET_NETWORKS => "tcp12(mxge0:6)" } },

		{ name => "sliod0", prog => "sliod", host => "sense4$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense4-sliod0.sock", LNET_NETWORKS => "tcp12(mxge0:0)" } },
		{ name => "sliod1", prog => "sliod", host => "sense4$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense4-sliod1.sock", LNET_NETWORKS => "tcp12(mxge0:1)" } },
		{ name => "sliod2", prog => "sliod", host => "sense4$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense4-sliod2.sock", LNET_NETWORKS => "tcp12(mxge0:2)" } },
		{ name => "sliod3", prog => "sliod", host => "sense4$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense4-sliod3.sock", LNET_NETWORKS => "tcp12(mxge0:3)" } },
		{ name => "sliod4", prog => "sliod", host => "sense4$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense4-sliod4.sock", LNET_NETWORKS => "tcp12(mxge0:4)" } },
		{ name => "sliod5", prog => "sliod", host => "sense4$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense4-sliod5.sock", LNET_NETWORKS => "tcp12(mxge0:5)" } },
		{ name => "sliod6", prog => "sliod", host => "sense4$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense4-sliod6.sock", LNET_NETWORKS => "tcp12(mxge0:6)" } },
		{ name => "sliod7", prog => "sliod", host => "sense4$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense4-sliod7.sock", LNET_NETWORKS => "tcp12(mxge0:7)" } },

		{ name => "sliod0", prog => "sliod", host => "sense5$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense5-sliod0.sock", LNET_NETWORKS => "tcp12(mxge0:0)" } },
		{ name => "sliod1", prog => "sliod", host => "sense5$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense5-sliod1.sock", LNET_NETWORKS => "tcp12(mxge0:1)" } },
		{ name => "sliod2", prog => "sliod", host => "sense5$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense5-sliod2.sock", LNET_NETWORKS => "tcp12(mxge0:2)" } },
		{ name => "sliod3", prog => "sliod", host => "sense5$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense5-sliod3.sock", LNET_NETWORKS => "tcp12(mxge0:3)" } },
		{ name => "sliod4", prog => "sliod", host => "sense5$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense5-sliod4.sock", LNET_NETWORKS => "tcp12(mxge0:4)" } },
		{ name => "sliod5", prog => "sliod", host => "sense5$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense5-sliod5.sock", LNET_NETWORKS => "tcp12(mxge0:5)" } },
		{ name => "sliod6", prog => "sliod", host => "sense5$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense5-sliod6.sock", LNET_NETWORKS => "tcp12(mxge0:6)" } },

		{ name => "sliod0", prog => "sliod", host => "sense6$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense6-sliod0.sock", LNET_NETWORKS => "tcp12(mxge0:0)" } },
		{ name => "sliod1", prog => "sliod", host => "sense6$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense6-sliod1.sock", LNET_NETWORKS => "tcp12(mxge0:1)" } },
		{ name => "sliod2", prog => "sliod", host => "sense6$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense6-sliod2.sock", LNET_NETWORKS => "tcp12(mxge0:2)" } },
		{ name => "sliod3", prog => "sliod", host => "sense6$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense6-sliod3.sock", LNET_NETWORKS => "tcp12(mxge0:3)" } },
		{ name => "sliod4", prog => "sliod", host => "sense6$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense6-sliod4.sock", LNET_NETWORKS => "tcp12(mxge0:4)" } },
		{ name => "sliod5", prog => "sliod", host => "sense6$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense6-sliod5.sock", LNET_NETWORKS => "tcp12(mxge0:5)" } },
		{ name => "sliod6", prog => "sliod", host => "sense6$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense6-sliod6.sock", LNET_NETWORKS => "tcp12(mxge0:6)" } },
		{ name => "sliod7", prog => "sliod", host => "sense6$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense6-sliod7.sock", LNET_NETWORKS => "tcp12(mxge0:7)" } },

		{ name => "sliod0", prog => "sliod", host => "sense7$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense7-sliod0.sock", LNET_NETWORKS => "tcp12(mxge0:0)" } },
		{ name => "sliod1", prog => "sliod", host => "sense7$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense7-sliod1.sock", LNET_NETWORKS => "tcp12(mxge0:1)" } },
		{ name => "sliod2", prog => "sliod", host => "sense7$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense7-sliod2.sock", LNET_NETWORKS => "tcp12(mxge0:2)" } },
		{ name => "sliod3", prog => "sliod", host => "sense7$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense7-sliod3.sock", LNET_NETWORKS => "tcp12(mxge0:3)" } },
		{ name => "sliod4", prog => "sliod", host => "sense7$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense7-sliod4.sock", LNET_NETWORKS => "tcp12(mxge0:4)" } },
		{ name => "sliod5", prog => "sliod", host => "sense7$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense7-sliod5.sock", LNET_NETWORKS => "tcp12(mxge0:5)" } },
		{ name => "sliod6", prog => "sliod", host => "sense7$p", dir => $ud, env => { CTL_SOCK_FILE => "/var/run/sense7-sliod6.sock", LNET_NETWORKS => "tcp12(mxge0:6)" } },

		{ exec => "sleep", arg => [2] },
		{ prog => "lnrtd", host => "firehose1$p", dir => $d, env => { LNET_NETWORKS => "sdp11(ib0),tcp12(vlan100)" } },
		{ prog => "lnrtd", host => "firehose2$p", dir => $d, env => { LNET_NETWORKS => "sdp11(ib0),tcp12(vlan100)" } },
		{ prog => "lnrtd", host => "firehose3$p", dir => $d, env => { LNET_NETWORKS => "sdp11(ib0),tcp12(vlan100)" } },
		{ prog => "lnrtd", host => "firehose4$p", dir => $d, env => { LNET_NETWORKS => "sdp11(ib0),tcp12(vlan100)" } },
	],
);

sub usage {
	die "usage: $0 [-bvX] [-x termarg] mode [host[:daemon] ...]\n";
}

my %opts;
getoptv('bvXx:', \%opts) or usage;
usage unless @ARGV;
my $mode = shift @ARGV;
my @uspecs = @ARGV;

sub echorun {
	warn @_, "\n" if $opts{v};
	system @_ or warn "$!\n";
}

my $term = "xterm";
$term = $ENV{TERM_PROG} if exists $ENV{TERM_PROG};
my $hostname = `hostname`;
chomp $hostname;

die "$mode: bad mode\n" unless exists $dep{$mode};

my $found = 0;
foreach my $spec (@{ $dep{$mode} }) {
	if ($spec->{exec}) {
		next if @uspecs && $spec->{exec} eq "sleep";
		echorun $spec->{exec}, @{ $spec->{arg} };
		next;
	}
	$spec->{name} = $spec->{prog} unless exists $spec->{name};
	if (@uspecs) {
		$found = 0;
		foreach my $uspec (@uspecs) {
			my ($h, $n) = split /:/, $uspec;
			$n = $spec->{name} unless $n;
			if ($n eq $spec->{name} &&
			    $spec->{host} =~ /^\Q$h\E/) {
				$found = 1;
				last;
			}
		}
		next unless $found;
	}
	unless (exists $opts{X} or $spec->{host} =~ /^\Q$hostname\E/) {
		warn "$spec->{host} is not this host ($hostname), skipping\n";
		next;
	}
	$spec->{cmds} = "" unless exists $spec->{cmds};
	my $init = <<EOF;
		export PSC_SYSLOG_info=1
		export PSC_LOG_LEVEL=warn
		export PSC_LOG_LEVEL_info=info
		export PSC_LOG_FILE=$spec->{dir}/$mode.s2/log/$spec->{name}.$spec->{host}/%t
		export CONFIG_FILE=$spec->{dir}/$mode.s2/slcfg
		export SHELL=/bin/bash
		export GDBHISTFILE=`which $spec->{prog}`.gdbhist
		@{[ map { qq!export $_="$spec->{env}{$_}"\n\t\t! } keys %{ $spec->{env} } ]}
		ulimit -n 100000

		mkdir -p \$(dirname \$PSC_LOG_FILE)
		cd "$spec->{dir}/src/p"

		@{[exists $spec->{init} ? $spec->{init} : ""]}

		tmpfile=/tmp/.gdbcmd.\$RANDOM
		(
			echo set history save on
			echo set history size 10000
			echo set confirm off
			echo set height 0
			@{[exists $spec->{arg} ? "echo set args $spec->{arg}" : ""]}
			echo ru
		) > \$tmpfile
		gdb -x \$tmpfile -q $spec->{prog}
EOF
	my @screen = qw(screen -A);
	if ($opts{b}) {
		push @screen, qw(-d -m);
	} else {
		push @screen, qw(-x -R);
	}
	my $name = "$mode.$spec->{name}";

	if ($opts{X}) {
		my @xtargs;
		push @xtargs, @{ $opts{x} } if $opts{x};
		push @xtargs,
		    qw(-xrm XTerm*allowTitleOps:false),
		    "-title", "$spec->{host}: $name" if $term =~ /xterm/;
		if (fork) {
			exec $term, @xtargs, qw(-e ssh -t), $spec->{host},
			    "sudo", @screen, "-S", $name,
			    "sh", "-c", "'$init'" or die "exec: $!\n";
		}
	} else {
		exec @screen, "-S", $name, "sh", "-c", $init or
		    die "exec: $!\n";
	}
}

warn "host/daemon spec produced no matches" if @uspecs && !$found;
