#!/usr/bin/env perl
# $Id$

# use lib qw(%INST_PLMODDIR%);
use lib qw(../../tools/lib);
use PFL::Getoptv;
use strict;
use warnings;


sub usage {
	die "usage: $0 [-bvX] [-x termarg] deployment [host[:daemon] ...]\n";
}

my %opts;
getoptv('bvXx:', \%opts) or usage;
usage unless @ARGV;
my $mode = shift @ARGV;
my @uspecs = @ARGV;

for () {
	if (-f ) {
		`prof=$mode; . $fn; echo "$@" `;
	}
}

sub echorun {
	warn @_, "\n" if $opts{v};
	system @_ or warn "$!\n";
}

my $term = "xterm";
$term = $ENV{TERM_PROG} if exists $ENV{TERM_PROG};
my $hostname = `hostname`;
chomp $hostname;

die "$mode: bad mode\n" unless exists $dep{$mode};

my $found = 0;
foreach my $spec (@{ $dep{$mode} }) {
	if ($spec->{exec}) {
		next if @uspecs && $spec->{exec} eq "sleep";
		echorun $spec->{exec}, @{ $spec->{arg} };
		next;
	}
	$spec->{name} = $spec->{prog} unless exists $spec->{name};
	if (@uspecs) {
		$found = 0;
		foreach my $uspec (@uspecs) {
			my ($h, $n) = split /:/, $uspec;
			$n = $spec->{name} unless $n;
			if ($n eq $spec->{name} &&
			    $spec->{host} =~ /^\Q$h\E/) {
				$found = 1;
				last;
			}
		}
		next unless $found;
	}
	unless (exists $opts{X} or $spec->{host} =~ /^\Q$hostname\E/) {
		warn "$spec->{host} is not this host ($hostname), skipping\n";
		next;
	}
	$spec->{cmds} = "" unless exists $spec->{cmds};
	my $init = <<EOF;
		export PSC_SYSLOG_info=1
		export PSC_LOG_LEVEL=warn
		export PSC_LOG_LEVEL_info=info
		export PSC_LOG_FILE=$spec->{dir}/$mode.s2/log/$spec->{name}.$spec->{host}/%t
		export CONFIG_FILE=$spec->{dir}/$mode.s2/slcfg
		export SHELL=/bin/bash
		export GDBHISTFILE=`which $spec->{prog}`.gdbhist
		@{[ map { qq!export $_="$spec->{env}{$_}"\n\t\t! } keys %{ $spec->{env} } ]}
		ulimit -n 100000

		mkdir -p \$(dirname \$PSC_LOG_FILE)
		cd "$spec->{dir}/src/p"

		@{[exists $spec->{init} ? $spec->{init} : ""]}

		tmpfile=/tmp/.gdbcmd.\$RANDOM
		(
			echo set history save on
			echo set history size 10000
			echo set confirm off
			echo set height 0
			@{[exists $spec->{arg} ? "echo set args $spec->{arg}" : ""]}
			echo ru
		) > \$tmpfile
		gdb -x \$tmpfile -q $spec->{prog}
EOF
	my @screen = qw(screen -A);
	if ($opts{b}) {
		push @screen, qw(-d -m);
	} else {
		push @screen, qw(-x -R);
	}
	my $name = "$mode.$spec->{name}";

	if ($opts{X}) {
		my @xtargs;
		push @xtargs, @{ $opts{x} } if $opts{x};
		push @xtargs,
		    qw(-xrm XTerm*allowTitleOps:false),
		    "-title", "$spec->{host}: $name" if $term =~ /xterm/;
		if (fork) {
			exec $term, @xtargs, qw(-e ssh -t), $spec->{host},
			    "sudo", @screen, "-S", $name,
			    "sh", "-c", "'$init'" or die "exec: $!\n";
		}
	} else {
		exec @screen, "-S", $name, "sh", "-c", $init or
		    die "exec: $!\n";
	}
}

warn "host/daemon spec produced no matches" if @uspecs && !$found;
